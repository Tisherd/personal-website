services:
  php:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
      args:
        - APP_ENV=${APP_ENV}
        - XDEBUG_ENABLED=${XDEBUG_ENABLED}
    image: ${APP_NAME}_php
    container_name: ${APP_NAME}_php
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
    depends_on:
      - postgres
      - redis
      - mongodb
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  supervisor:
    build:
      context: .
      dockerfile: docker/supervisor/Dockerfile
    container_name: ${APP_NAME}_supervisor
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
    depends_on:
      - php
    healthcheck:
      test: ["CMD", "supervisorctl", "status"]
      interval: 30s
      retries: 3
      timeout: 5s
    networks:
      - app-network

  nginx:
    image: nginx:1.27.3-alpine
    container_name: ${APP_NAME}_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./public:/var/www/public
      - ./storage/app/public:/var/www/storage/app/public
      - ./docker/nginx/conf.d/${APP_ENV}.conf:/etc/nginx/conf.d/app.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./docker/certbot/www/:/var/www/certbot
      - ./docker/certbot/conf/:/etc/letsencrypt
    depends_on:
      - php
    networks:
      - app-network

  node:
    build:
      context: .
      dockerfile: docker/node/Dockerfile
      args:
        APP_ENV: ${APP_ENV}
    image: ${APP_NAME}_node
    container_name: ${APP_NAME}_node
    restart: on-failure
    ports:
    - "3000:3000"
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - /var/www/node_modules
    networks:
      - app-network

  postgres:
    image: postgres:17
    container_name: ${APP_NAME}_postgres
    restart: unless-stopped
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init_scripts:/docker-entrypoint-initdb.d:ro
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_TEST_DB=${POSTGRES_TEST_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - app-network

  mongodb:
    image: mongo:6.0
    container_name: ${APP_NAME}_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init_scripts:/docker-entrypoint-initdb.d:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      MONGO_TEST_DB_NAME: ${MONGO_TEST_DB_NAME}
      APP_ENV: ${APP_ENV}
    networks:
      - app-network

  redis:
    image: redis:7.4
    container_name: ${APP_NAME}_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
